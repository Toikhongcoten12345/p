# -*- coding: utf-8 -*-
"""UngDung.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1elgS-TNflLD09Y1IZlNXxwHtmu4vNQy-
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

#
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier

#
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.model_selection import RandomizedSearchCV, GridSearchCV
from sklearn.metrics import confusion_matrix, classification_report
from sklearn.metrics import precision_score, recall_score, f1_score

from google.colab import drive
drive.mount('/content/drive')
df = pd.read_csv('/content/drive/MyDrive/KLTN/covid_19_indias.csv')

import pandas as pd
from sklearn.preprocessing import LabelEncoder
df['ConfirmedIndianNational'] = pd.to_numeric(df['ConfirmedIndianNational'], errors='coerce')
df['ConfirmedForeignNational'] = pd.to_numeric(df['ConfirmedForeignNational'], errors='coerce')
df['Population'] = pd.to_numeric(df['Population'], errors='coerce')
label_encoder = LabelEncoder()
df['State_UnionTerritory'] = label_encoder.fit_transform(df['State_UnionTerritory'])
df['Time'] = label_encoder.fit_transform(df['Time'])
df['Date'] = label_encoder.fit_transform(df['Date'])
df['Population'] = label_encoder.fit_transform(df['Population'])
df['ConfirmedIndianNational'] = label_encoder.fit_transform(df['ConfirmedIndianNational'])
df['ConfirmedForeignNational'] = label_encoder.fit_transform(df['ConfirmedForeignNational'])

print(df.dtypes)

df.head(2365)

df.tail()

df.info()

df.isnull().sum()

df['Correlate'].value_counts()

df['Correlate'].value_counts().plot.bar(color=['lightgreen', 'lightblue']);
plt.xlabel('1: Dangerous, 0: Not Dangerous"')
plt.ylabel('Count');

df.describe().transpose()

pd.crosstab(df['Density'], df['Correlate']).plot(kind='bar');
plt.title('Distribution of Hazard Levels Based on Population')
plt.xlabel('0: Not Dangerous, 1: Dangerous')
plt.ylabel('Count')
plt.xticks(rotation=0)

df.columns

numeric_columns = df.select_dtypes(include=['int64', 'float64'])
corr_matrix = numeric_columns.corr()
plt.figure(figsize=(12, 8))
sns.heatmap(corr_matrix, annot=True, linewidth=0.5, fmt='.2f', cmap='inferno');
plt.show()

df.head(2)

x = df.drop('Correlate', axis=1)
y = df['Correlate']

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

models ={
    'LogisticRegression': LogisticRegression(max_iter=1000),
    'KNN': KNeighborsClassifier(),
    'RandomForestClassifier': RandomForestClassifier()
}
def fit_and_score(models, x_train, x_test, y_train, y_test):
    """
    Fits and evalute given machine learning models.
    models: a dictionary of different scikit learn machine learning models
    x_train: training data (no labels)
    x_test: testing data (no labels)
    y_train: training labels
    y_test: testing labels
    returns model scores dictionary.
    """

    np.random.seed(42)

    model_scores = {}

    for model_name, model in models.items():
        model.fit(x_train, y_train)
        score = model.score(x_test, y_test)
        model_scores[model_name] = score
    return model_scores

model_scores = fit_and_score(models, x_train, x_test, y_train, y_test)
model_scores

model_compare = pd.DataFrame(model_scores, index=['accuracy'])
model_compare.head()

model_compare.T.plot(kind='bar')

ran_for_grid ={
    'n_estimators': [50, 100, 200, 300, 400]
}
gs_ran_for = GridSearchCV(RandomForestClassifier(),
                          ran_for_grid,
                          cv=5,
                          verbose=True)
gs_ran_for.fit(x_train, y_train)

df.to_csv('predict_Covid_dangerous_areas_covid19.csv', index=False)

gs_ran_for.best_params_

gs_ran_for.score(x_test, y_test)

y_preds = gs_ran_for.predict(x_test)

from sklearn.metrics import roc_curve, auc
y_scores = gs_ran_for.predict_proba(x_test)[:, 1]
fpr, tpr, _ = roc_curve(y_test, y_scores)
roc_auc = auc(fpr, tpr)

plt.figure(figsize=(4, 4 ))
plt.plot(fpr, tpr, color='darkorange', lw=2, label='ROC curve (area = {:.2f})'.format(roc_auc))
plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC) Curve')
plt.legend(loc='lower right')
plt.show()

confusion_matrix(y_test, y_preds)

y_pred = gs_ran_for.predict(x_test)
cm = confusion_matrix(y_test, y_pred)

plt.figure(figsize=(3, 3))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', cbar=False)
plt.xlabel('Predicted Labels')
plt.ylabel('True Labels')
plt.title('Confusion Matrix')
plt.show()

print(classification_report(y_test, y_preds))

gs_ran_for.best_params_

clf = RandomForestClassifier(n_estimators=100)

cv_accuracy = cross_val_score(clf, x, y, scoring='accuracy', cv=5)
cv_precision = cross_val_score(clf, x, y, scoring='precision', cv=5)
cv_recall = cross_val_score(clf, x, y, scoring='recall', cv=5)
cv_f1 = cross_val_score(clf, x, y, scoring='f1', cv=5)

mean_cv_accuracy = np.mean(cv_accuracy)
mean_cv_precision = np.mean(cv_precision)
mean_cv_recall = np.mean(cv_recall)
mean_cv_f1 = np.mean(cv_f1)

cv_metrics = pd.DataFrame({
    'Accuracy': [mean_cv_accuracy],
    'Precision': [mean_cv_precision],
    'Recall': [mean_cv_recall],
    'F1': [mean_cv_f1]
})

cv_metrics.T.plot(legend=False)
plt.title('Cross Validates Classification Metrics')
plt.xticks(rotation=30)
plt.show()

clf = RandomForestClassifier()

clf.fit(x_train, y_train)

feature_importances = clf.feature_importances_

for feature, importance in zip(x_train.columns, feature_importances):
    print(f"{feature}: {importance}")

df.head(2)

feature_dict = dict(zip(df.columns, clf.feature_importances_))
feature_dict

feature_df = pd.DataFrame(feature_dict, index=[0])
feature_df.T.plot.bar(title='Feature Importance Of RandomForestClassifier', legend=False);

x.head()

x.columns

def predict_Covid_dangerous_areas(Sno, Date, Time, State_UnionTerritory,
                                  ConfirmedIndianNational, ConfirmedForeignNational, Cured,
                                  Deaths, Confirmed, Population, Density):
    x = np.zeros((1, 11))
    x[0, 0] = Sno
    x[0, 1] = Date
    x[0, 2] = Time
    x[0, 3] = State_UnionTerritory
    x[0, 4] = ConfirmedIndianNational
    x[0, 5] = ConfirmedForeignNational
    x[0, 6] = Cured
    x[0, 7] = Deaths
    x[0, 8] = Confirmed
    x[0, 9] = Population
    x[0, 10] = Density
    return gs_ran_for.predict(x)[0]

prediction_result = predict_Covid_dangerous_areas(1, 334, 2, 0, 1, 0, 0, 1, 0, 6, 0)

if prediction_result == 0:
    print("Is not a dangerous area.")
else:
    print("Is a dangerous area.")